{"version":3,"sources":["redux/actionTypes.js","utils/Common.js","redux/actions.js","utils/history.js","components/Login.js","utils/PrivateRoute.js","components/CreateStory.js","components/StoryList.js","components/Story.js","App.js","reportWebVitals.js","redux/initialState.js","redux/store.js","redux/reducers.js","index.js"],"names":["SET_LOGIN_STATE","SET_ROLE_STATE","CREATE_STORY","LOGOUT","GET_STORIES","GET_STORY","getToken","sessionStorage","getItem","token","login","loginInput","email","isAdmin","password","dispatch","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","loginData","userId","type","t","payload","user","setItem","setUserSession","lastName","catch","err","alert","console","log","getStories","storyData","viewStory","id","createStory","storyInput","summary","description","complexity","time","cost","createBrowserHistory","withRouter","useState","setEmail","setPassword","setIsAdmin","usedispatch","useDispatch","useSelector","state","loginReducer","role","className","name","placeholder","onChange","e","target","value","disabled","onClick","preventDefault","userLogin","setTimeout","history","push","PrivateRoute","Component","component","rest","render","props","to","pathname","from","location","setSummary","setDescription","setType","setcomplexity","setTime","setCost","for","defaultValue","userCreateStory","currStories","storyReducer","stories","useEffect","admin","handleClick","viewStories","map","story","status","estimatedHrs","currStory","updateStatus","setStatus","App","userLogout","exact","path","Login","CreateStory","StoryList","Story","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isLoggedIn","data","rootReducer","combineReducers","action","persistConfig","key","storage","whitelist","pReducer","persistReducer","store","createStore","applyMiddleware","thunkMiddleware","logger","persistor","persistStore","ReactDOM","loading","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.424c6a5b.chunk.js","sourcesContent":["export const SET_LOGIN_STATE = \"SET_LOGIN_STATE\"\r\nexport const SET_ROLE_STATE = \"SET_ROLE_STATE\"\r\nexport const CREATE_STORY = \"CREATE_STORY\"\r\nexport const ADD_STORY = \"ADD_STORY\"\r\nexport const LOGOUT = \"LOGOUT\"\r\nexport const GET_STORIES = \"GET_STORIES\"\r\nexport const GET_STORY = \"GET_STORY\"","import { useState } from 'react'\r\n\r\n// return the user data from the session storage\r\nexport const getUser = () => {\r\n    const userStr = sessionStorage.getItem('user');\r\n    if (userStr) return JSON.parse(userStr);\r\n    else return null;\r\n}\r\n   \r\n// return the token from the session storage\r\nexport const getToken = () => {\r\n    return sessionStorage.getItem('token') || null;\r\n}\r\n   \r\n// remove the token and user from the session storage\r\nexport const removeUserSession = () => {\r\n    sessionStorage.removeItem('token');\r\n    sessionStorage.removeItem('user');\r\n}\r\n   \r\n// set the token and user from the session storage\r\nexport const setUserSession = (token, user) => {\r\n    sessionStorage.setItem('token', token);\r\n    sessionStorage.setItem('user', JSON.stringify(user));\r\n}\r\n\r\n","import * as t from './actionTypes';\r\nimport { setUserSession } from '../utils/Common';\r\nimport { getToken } from '../utils/Common'\r\n\r\n\r\nconst token = getToken();\r\n\r\n// this is what our action should look like which dispatches the \"payload\" to reducer\r\nconst setLoginState = (loginData) => {\r\n  return {\r\n    type: t.SET_LOGIN_STATE,\r\n    payload: loginData, //{ ...json, userId: email }\r\n  };\r\n};\r\n\r\nconst setStoryState = (storyData) => {\r\n    return {\r\n      type: t.CREATE_STORY,\r\n      payload: storyData, //storyData is the object with summary, description, type, etc.\r\n    };\r\n};\r\n\r\nconst getStoryState = (storyData) => {\r\n  return {\r\n    type: t.GET_STORIES,\r\n    payload: storyData, //storyData is the object with summary, description, type, etc.\r\n  };\r\n};\r\n\r\nconst getSingleStoryState = (storyData) => {\r\n  return {\r\n    type: t.GET_STORY,\r\n    payload: storyData, //storyData is the object with summary, description, type, etc.\r\n  };\r\n};\r\n\r\nexport const login = (loginInput) => { //our login action\r\n    const { email, password, isAdmin } = loginInput;\r\n    return (dispatch) => {  // don't forget to use dispatch here!\r\n      return fetch('http://localhost:3000/api/v1/signin', {\r\n        method: 'POST',\r\n        headers: {  \r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(loginInput),\r\n      })\r\n        .then((response) => response.json()) //json will be the response body\r\n        .then((json) => {\r\n        // if (json.msg === 'success') { // response success checking logic could differ\r\n           // console.log(json)\r\n            dispatch(setLoginState({ ...json, userId: email, isAdmin: isAdmin })); // our action is called here with object as parameter, this is our payload\r\n            //we appended json object to our state\r\n            //   } else {\r\n        //     alert('Login Failed', 'Email or Password is incorrect');\r\n        //  }\r\n            setUserSession(json.token, json.lastName)\r\n        })\r\n        .catch((err) => {\r\n          alert('Login Failed', 'Some error occured, please retry');\r\n          console.log(err);\r\n        });\r\n    };\r\n};\r\n\r\nexport const getStories = () => {\r\n    return (dispatch) => {  // don't forget to use dispatch here!\r\n      return fetch('http://localhost:3000/api/v1/stories', {\r\n        method: 'GET',\r\n        headers: {  \r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n      })\r\n        .then((response) => response.json()) //json will be the response body\r\n        .then((json) => {\r\n        // if (json.msg === 'success') { // response success checking logic could differ\r\n            console.log(json)\r\n            dispatch(getStoryState( [...json ])); // our action is called here with object as parameter, this is our payload\r\n            //we appended json object to our state\r\n            //   } else {\r\n        //     alert('Login Failed', 'Email or Password is incorrect');\r\n        //  }\r\n        })\r\n        .catch((err) => {\r\n          alert('Login Failed', 'Some error occured, please retry');\r\n          console.log(err);\r\n        });\r\n    };\r\n}\r\n\r\nexport const viewStory = id => {\r\n  return (dispatch) => {  // don't forget to use dispatch here!\r\n      return fetch(`http://localhost:3000/api/v1/stories/${id}`, {\r\n        method: 'GET',\r\n        headers: {  \r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n      })\r\n        .then((response) => response.json()) //json will be the response body\r\n        .then((json) => {\r\n        // if (json.msg === 'success') { // response success checking logic could differ\r\n            console.log(json)\r\n            \r\n            dispatch(getSingleStoryState( {...json } )); // our action is called here with object as parameter, this is our payload\r\n            //we appended json object to our state\r\n            //   } else {\r\n        //     alert('Login Failed', 'Email or Password is incorrect');\r\n        //  }\r\n        })\r\n        .catch((err) => {\r\n          alert('Login Failed', 'Some error occured, please retry');\r\n          console.log(err);\r\n        });\r\n    };\r\n}\r\n\r\nexport const roleChange = () => {\r\n    return {\r\n        type: t.SET_ROLE_STATE,\r\n        //payload: role\r\n      };\r\n}\r\n\r\nexport const logout = () => {\r\n  return {\r\n    type: t.LOGOUT,\r\n  };\r\n}\r\n\r\nconsole.log(token)\r\n\r\nexport const createStory = storyInput => {\r\n    const { summary, description, type, complexity, time, cost } = storyInput;\r\n    return (dispatch) => {  // don't forget to use dispatch here!\r\n      return fetch('http://localhost:3000/api/v1/stories', {\r\n        method: 'POST',\r\n        headers: {  \r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(storyInput),\r\n      })\r\n        .then((response) => response.json()) //json will be the response body\r\n        .then((json) => {\r\n        // if (json.msg === 'success') { // response success checking logic could differ\r\n            console.log(json)\r\n            //dispatch(setStoryState( [...json ]));\r\n            dispatch(setStoryState({  // our action is called here with object as parameter, this is our payload\r\n                summary: summary,\r\n                description: description,\r\n                type: type,\r\n                complexity: complexity,\r\n                time: time,\r\n                cost: cost\r\n            })); // our action is called here\r\n        //   } else {\r\n        //     alert('Login Failed', 'Email or Password is incorrect');\r\n        //  }\r\n        })\r\n        .catch((err) => {\r\n          alert('Some error occured, please retry');\r\n          console.log(err);\r\n        });\r\n    };\r\n}\r\n\r\nexport const addStory = story => {\r\n    return {\r\n        type: t.ADD_STORY,\r\n        payload: story,\r\n    }\r\n}\r\n\r\nexport const setStatus = (id, status) => {\r\n  return (dispatch) => {  // don't forget to use dispatch here!\r\n      return fetch(`http://localhost:3000/api/v1/stories/${id}/${status}`, {\r\n        method: 'PUT',\r\n        headers: {  \r\n          Accept: 'application/json',\r\n          'Content-Type': 'text/html',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n      })\r\n        .then((response) => response.json()) //json will be the response body\r\n        .then((json) => {\r\n        // if (json.msg === 'success') { // response success checking logic could differ\r\n            console.log(json)\r\n            \r\n         //   dispatch(getStoryState( {...json } )); // our action is called here with object as parameter, this is our payload\r\n            //we appended json object to our state\r\n            //   } else {\r\n        //     alert('Login Failed', 'Email or Password is incorrect');\r\n        //  }\r\n        })\r\n        .catch((err) => {\r\n          alert('Login Failed', 'Some error occured, please retry');\r\n          console.log(err);\r\n        });\r\n    };\r\n}\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login, roleChange } from '../redux/actions' //OUR ACTIONS\r\nimport { useSelector } from 'react-redux'\r\nimport history from '../utils/history';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n    const usedispatch = useDispatch();\r\n    const userLogin = (email, password, isAdmin) => usedispatch(login({'email': email, 'password': password, 'isAdmin': isAdmin }));\r\n    const switchToAdmin = () => usedispatch(roleChange('admin'));\r\n    const switchToUser = () => usedispatch(roleChange('user'));\r\n    const currentRole = useSelector((state)=> state.loginReducer.role)\r\n\r\n    const handleRoleChange = e => {\r\n\r\n        setIsAdmin(true)\r\n        if(isAdmin)\r\n            setIsAdmin(false)\r\n        console.log(isAdmin)\r\n    }\r\n    \r\n    const handleEmailChange = e => {\r\n        setEmail(e.target.value)\r\n    }\r\n\r\n    const handlePasswordChange = e => {\r\n        setPassword(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        userLogin(email, password, isAdmin)\r\n        setTimeout(()=> history.push(\"/user\"), 1000 );\r\n    }\r\n\r\n    const disabled = () => {\r\n        return email === \"\" || password === \"\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className='login-form'>\r\n                <input type='email' name='email' placeholder='Email' onChange={handleEmailChange}/>\r\n                <input type='password' name='password' placeholder='Password' onChange={handlePasswordChange}/>\r\n                <button type='submit' disabled={disabled()} onClick={handleSubmit}>Login</button>\r\n            </form>\r\n            <button onClick={handleRoleChange}>Switch to {isAdmin ? 'user' : 'admin'}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Login);\r\n\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { getToken } from './Common';\r\nimport { useSelector } from 'react-redux'\r\n \r\n// handle the private routes\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n\r\n  const getToken = useSelector((state)=> state.loginReducer.token)\r\n  console.log(getToken)\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => getToken ? <Component {...props} /> : <Redirect to={{ pathname: '/', state: { from: props.location } }} />}\r\n    />\r\n  )\r\n}\r\n \r\nexport default PrivateRoute;\r\n\r\n//gettoken is not true on first attempt of login, it is true on second attempt","import React, { useState } from 'react'\r\nimport { createStory } from '../redux/actions'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport history from '../utils/history';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst CreateStory = () => {\r\n\r\n    const [summary, setSummary] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [type, setType] = useState(\"\");\r\n    const [complexity, setcomplexity] = useState(\"\");\r\n    const [time, setTime] = useState(\"\");\r\n    const [cost, setCost] = useState(0);\r\n\r\n    const usedispatch = useDispatch();\r\n    const userCreateStory = (summary, description, type, complexity) => usedispatch(createStory({\r\n                                                                                    'summary': summary,\r\n                                                                                    'description': description,\r\n                                                                                    'type': type,\r\n                                                                                    'complexity': complexity,\r\n                                                                                    'time': time,\r\n                                                                                    'cost': cost \r\n                                                                                }));\r\n\r\n    const handleSummaryChange = e => {\r\n        setSummary(e.target.value)\r\n    }  \r\n    \r\n    const handleDescriptionChange = e => {\r\n        setDescription(e.target.value)\r\n    }\r\n\r\n    const handleTypeChange = e => {\r\n        setType(e.target.value)\r\n    }\r\n\r\n    const handleComplexityChange = e => {\r\n        setcomplexity(e.target.value)\r\n    }\r\n\r\n    const handleTimeChange = e => {\r\n        setTime(e.target.value)\r\n    }\r\n\r\n    const handleCostChange = e => {\r\n        setCost(e.target.value)\r\n    }\r\n\r\n   // const currStory = useSelector((state)=> state.storyReducer.story)\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        userCreateStory(summary,description,type,complexity,time,cost)\r\n        setTimeout(()=> history.push(\"/userStories\"), 1000 );\r\n      //setTimeout(()=> console.log(currStory) ,1000)\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <form className='create-story-form'>\r\n                <label for=\"summary\">Summary:</label>\r\n                <input name=\"summary\" type='text' onChange={handleSummaryChange}/>\r\n                <label for=\"desc\">Description:</label>\r\n                <textarea name=\"desc\" type='text' onChange={handleDescriptionChange}/>\r\n                <label for=\"type\">Type:</label>\r\n                <select name=\"type\" onChange={handleTypeChange}>\r\n                    <option value=\"enhancement\" defaultValue>Enchancement</option>\r\n                    <option value=\"bugfix\">Bugfix</option>\r\n                    <option value=\"development\">Development</option>\r\n                    <option value=\"qa\">QA</option>\r\n                </select>\r\n                <label for=\"complexity\">Complexity:</label>\r\n                <select name=\"complexity\" onChange={handleComplexityChange}>\r\n                    <option value=\"low\" defaultValue>Low</option>\r\n                    <option value=\"mid\">Mid</option>\r\n                    <option value=\"high\">High</option>\r\n                </select>\r\n                <label for=\"time\">Estimated time for completion:</label>\r\n                <input name=\"time\" type='text' onChange={handleTimeChange}/>\r\n                <label for=\"cost\">Cost:</label>\r\n                <input name=\"cost\" type='number' onChange={handleCostChange}/>\r\n                <button onClick={handleSubmit}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(CreateStory);","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addStory } from '../redux/actions'\r\nimport { getStories, viewStory } from '../redux/actions' //OUR ACTIONS\r\nimport history from '../utils/history';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst StoryList = () => {\r\n\r\n\r\n    const currStories = useSelector((state)=> state.storyReducer.stories)\r\n    const usedispatch = useDispatch();\r\n    const userStories = () => usedispatch(getStories());\r\n    const viewStories = (id) => usedispatch(viewStory(id));\r\n    // let story = {}\r\n      useEffect(() => {\r\n        userStories()\r\n\r\n     }, []);\r\n     console.log('test')\r\n     console.log(currStories)\r\n\r\n\r\n    const admin = useSelector((state)=> state.loginReducer.isAdmin)\r\n  \r\n    const handleClick = id => {\r\n        \r\n        console.log('test')\r\n        if(admin) {//admin click on story to view using get request with id, use {story.id} in this file\r\n            viewStories(id)\r\n            setTimeout(()=> history.push(\"/userStory\"), 1000 )\r\n        }\r\n    }\r\n\r\n    const backgroundColor = status => {\r\n        if(status === 'accepted') {\r\n            return 'bg-green'\r\n        }\r\n        else if(status === 'rejected') {\r\n            return 'bg-red'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <section>\r\n                <header>\r\n                    \r\n                        <div className='col'><strong>Summary</strong></div>\r\n                        <div className='col'><strong>Description</strong></div>\r\n                        <div className='col'><strong>Type</strong></div>\r\n                        <div className='col'><strong>Complexity</strong></div>\r\n                        <div className='col'><strong>Time</strong></div>\r\n                        <div className='col'><strong>Cost</strong></div>\r\n                   \r\n                </header>\r\n                \r\n                {currStories.map(story => {\r\n                return (\r\n                    <div className={`row bg-black text-white ${backgroundColor(story.status)}`} onClick={()=>handleClick(story.id)}>\r\n                        <div className='col'>{story.summary}</div>\r\n                        <div className='col'>{story.description}</div>\r\n                        <div className='col'>{story.type}</div>\r\n                        <div className='col'>{story.complexity}</div>\r\n                        <div className='col'>{story.estimatedHrs}</div>\r\n                        <div className='col'>{story.cost}</div>\r\n                    </div>   \r\n                    \r\n                )\r\n            })}\r\n            </section>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default withRouter(StoryList);\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setStatus } from '../redux/actions' //OUR ACTIONS\r\nimport history from '../utils/history';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst Story = () => {\r\n\r\n    const currStory = useSelector((state)=> state.storyReducer.story)\r\n    const usedispatch = useDispatch();\r\n    const updateStatus = (id, status) => usedispatch(setStatus(id, status));\r\n\r\n    const handleClick = (id, status) => {\r\n        updateStatus(id, status)\r\n        setTimeout(()=> history.push(\"/userStories\"), 1000 )\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <section>\r\n            <header>\r\n                <div className='col'><strong>Summary</strong></div>\r\n                <div className='col'><strong>Description</strong></div>\r\n                <div className='col'><strong>Type</strong></div>\r\n                <div className='col'><strong>Complexity</strong></div>\r\n                <div className='col'><strong>Time</strong></div>\r\n                <div className='col'><strong>Cost</strong></div>\r\n                <div className='col'><strong>Status</strong></div>\r\n            </header>\r\n            <div className='row'>\r\n                <div className='col'>{currStory.summary}</div>\r\n                <div className='col'>{currStory.description}</div>\r\n                <div className='col'>{currStory.type}</div>\r\n                <div className='col'>{currStory.complexity}</div>\r\n                <div className='col'>{currStory.estimatedHrs}</div>\r\n                <div className='col'>{currStory.cost}</div>\r\n                <div className='col'>{currStory.status}</div>\r\n            </div>\r\n            \r\n        </section>\r\n        <div className='btns'>\r\n            <button className='btn btn-accept' onClick={()=> handleClick(currStory.id,\"accepted\")}>Accept</button>\r\n            <button className='btn btn-reject' onClick={()=> handleClick(currStory.id,\"rejected\")}>Reject</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Story)\r\n\r\n\r\n\r\n\r\n","import './App.scss';\nimport Login from './components/Login';\nimport { Router, Switch, Route, NavLink } from 'react-router-dom';\nimport PrivateRoute from './utils/PrivateRoute';\nimport CreateStory from './components/CreateStory';\nimport history from './utils/history';\nimport StoryList from './components/StoryList';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from \"react-redux\";\nimport { logout } from './redux/actions' //OUR ACTIONS\nimport Story from './components/Story'\n\nfunction App() {\n\n  const usedispatch = useDispatch();\n  const userLogout = () => usedispatch(logout());\n  const handleLogout = () => {\n    userLogout()\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Router history={history}>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <PrivateRoute path=\"/user\" component={CreateStory}/>\n          <PrivateRoute path=\"/userStories\" component={StoryList}/>\n          <PrivateRoute path=\"/userStory\" component={Story}/>\n        </Switch>\n        <Link to=\"/\" onClick={handleLogout}>Logout</Link>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { getToken } from '../utils/Common'\r\n\r\nexport const initialState = {\r\n    isLoggedIn: false,\r\n    userId: '',\r\n    isAdmin: false,\r\n    token: getToken(),\r\n    data: '',\r\n    stories: [{\r\n        complexity: \"\",\r\n        cost: 0,\r\n        description: \"\",\r\n        summary: \"\",\r\n        time: \"\",\r\n        type: \"\"\r\n    }],\r\n    story: {}\r\n  };","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { loginReducer, storyReducer } from './reducers';\r\nimport logger from 'redux-logger'\r\nimport { roleChange } from './actions';\r\nimport { initialState } from './initialState';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst rootReducer = combineReducers({\r\n    loginReducer: loginReducer,\r\n    storyReducer: storyReducer\r\n  });\r\n\r\nconst persistConfig = {\r\n    key: 'data',\r\n    storage: storage,\r\n    whitelist: ['loginReducer', 'storyReducer'] // which reducer want to store\r\n  };\r\n  const pReducer = persistReducer(persistConfig, rootReducer); \r\n\r\nconst store = createStore(\r\n    pReducer,\r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        logger\r\n    )\r\n);\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { persistor, store }","import { initialState } from './initialState';\r\nimport * as t from './actionTypes';\r\n\r\nexport const loginReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case t.SET_ROLE_STATE:\r\n      return {\r\n        ...state,\r\n        isAdmin: true\r\n      };\r\n    case t.SET_LOGIN_STATE:\r\n      return {\r\n        ...state,\r\n        ...action.payload, // this is what we expect to get back from API call and login page input\r\n        isLoggedIn: true, // we set this as true on login\r\n      };\r\n    case t.LOGOUT: \r\n      return {\r\n        initialState\r\n      };\r\n    default:\r\n      return state;\r\n  } \r\n};\r\n\r\nexport const storyReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case t.CREATE_STORY:\r\n      return {\r\n        ...state,\r\n        stories: [...state.stories, action.payload],\r\n      };\r\n    case t.GET_STORIES:\r\n      return {\r\n        ...state,\r\n        stories: action.payload,\r\n      };\r\n    case t.GET_STORY:\r\n      return {\r\n        ...state,\r\n        story: action.payload,\r\n      };\r\n    // case t.ADD_STORY:\r\n    //   return {\r\n    //     ...state,\r\n    //     stories: [...state.stories, action.payload], //stories is an object\r\n    //   };\r\n    case t.LOGOUT:\r\n      return {\r\n        stories: [{complexity: \"\",\r\n        cost: 0,\r\n        description: \"\",\r\n        summary: \"\",\r\n        time: \"\",\r\n        type: \"\"}]\r\n      };\r\n    default:\r\n      return state;\r\n  } \r\n}\r\n\r\n// export const roleReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case t.SET_ROLE_STATE:\r\n//       return {\r\n//         ...state,\r\n//         role: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   } \r\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { persistor, store } from './redux/store'\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\n{/* <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate> */}\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}